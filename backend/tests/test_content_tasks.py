# backend/tests/test_content_tasks.py

import pytest
import datetime
import asyncio
from httpx import AsyncClient
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy import select
from pathlib import Path

# –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—Å–µ —ç—Ç–∏ –∏–º–ø–æ—Ä—Ç—ã –µ—Å—Ç—å –≤ –Ω–∞—á–∞–ª–µ —Ñ–∞–π–ª–∞
from app.db.models import ScheduledPost, ScheduledPostStatus
from app.services.vk_api import VKAPI
from tests.utils.task_runner import run_and_verify_task, run_worker_for_duration

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—É—Ç—å –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Ç–µ—Å—Ç–æ–≤
TESTS_ROOT_DIR = Path(__file__).parent 

@pytest.fixture(scope="module", autouse=True)
def create_test_assets_folder():
    assets_dir = TESTS_ROOT_DIR / "assets"
    assets_dir.mkdir(parents=True, exist_ok=True)
    print(f"\n[PREP] –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤ –ø–∞–ø–∫–µ '{assets_dir.resolve()}' –µ—Å—Ç—å —Ñ–∞–π–ª—ã 'test_image_1.jpg' –∏ 'test_image_2.jpg'")


async def test_task_like_feed(async_client: AsyncClient, db_session: AsyncSession, authorized_user_and_headers: tuple):
    user, headers = authorized_user_and_headers
    await run_and_verify_task(async_client, db_session, headers, "like_feed", {"count": 3, "filters": {}}, user.id)


async def test_task_view_stories(async_client: AsyncClient, db_session: AsyncSession, authorized_user_and_headers: tuple):
    user, headers = authorized_user_and_headers
    await run_and_verify_task(async_client, db_session, headers, "view_stories", {}, user.id)


async def test_batch_upload_from_file(async_client: AsyncClient, authorized_user_and_headers: tuple):
    _, headers = authorized_user_and_headers
    image_paths = [TESTS_ROOT_DIR / "assets/test_image_1.jpg", TESTS_ROOT_DIR / "assets/test_image_2.jpg"]
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º with –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–∫—Ä—ã—Ç–∏—è —Ñ–∞–π–ª–æ–≤
    with open(image_paths[0], 'rb') as f1, open(image_paths[1], 'rb') as f2:
        files_to_upload = [
            ('images', (image_paths[0].name, f1, 'image/jpeg')),
            ('images', (image_paths[1].name, f2, 'image/jpeg'))
        ]
        upload_resp = await async_client.post("/api/v1/posts/upload-images-batch", headers=headers, files=files_to_upload)
    
    assert upload_resp.status_code == 200
    assert len(upload_resp.json().get("attachment_ids", [])) == 2


async def test_batch_schedule_and_publish(
    async_client: AsyncClient,
    db_session: AsyncSession,
    authorized_user_and_headers: tuple,
    vk_api_client: VKAPI
):
    user, headers = authorized_user_and_headers
    
    # --- –®–ê–ì 1: –ó–∞–≥—Ä—É–∂–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ –ø–æ—Å—Ç–∞ ---
    print("\n[STEP 1] –ó–∞–≥—Ä—É–∑–∫–∞ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ –ø–æ—Å—Ç–∞...")
    image_path = TESTS_ROOT_DIR / "assets/test_image_1.jpg"
    assert image_path.exists(), "–¢–µ—Å—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ test_image_1.jpg –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!"

    with open(image_path, "rb") as f:
        files_to_upload = {'image': (image_path.name, f, 'image/jpeg')}
        upload_resp = await async_client.post("/api/v1/posts/upload-image-file", headers=headers, files=files_to_upload)
    
    assert upload_resp.status_code == 200
    attachment_id_local = upload_resp.json().get("attachment_id")
    assert attachment_id_local
    print(f"[STEP 1] –õ–æ–∫–∞–ª—å–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ, attachment_id: {attachment_id_local}")

    # --- –®–ê–ì 2: –ü–ª–∞–Ω–∏—Ä—É–µ–º –¥–≤–∞ –ø–æ—Å—Ç–∞ —Å —Ä–µ–∞–ª—å–Ω—ã–º –≤—Ä–µ–º–µ–Ω–Ω—ã–º –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º ---
    now = datetime.datetime.now(datetime.timezone.utc)
    timestamp_str = f"{now:%H:%M:%S}"

    # –ü–æ—Å—Ç ‚Ññ1 (—Å –ª–æ–∫–∞–ª—å–Ω—ã–º —Ñ–∞–π–ª–æ–º) —á–µ—Ä–µ–∑ 20 —Å–µ–∫—É–Ω–¥
    publish_time_1 = now + datetime.timedelta(seconds=20)
    post_1_data = {
        "post_text": f"ü§ñ –õ–æ–∫–∞–ª—å–Ω—ã–π –ø–æ—Å—Ç –≤ {timestamp_str}", 
        "publish_at": publish_time_1.isoformat(),
        "attachments": [attachment_id_local]
    }

    # –ü–æ—Å—Ç ‚Ññ2 (—Å –∑–∞–≥—Ä—É–∑–∫–æ–π –ø–æ URL) —á–µ—Ä–µ–∑ 40 —Å–µ–∫—É–Ω–¥
    publish_time_2 = now + datetime.timedelta(seconds=40)
    post_2_data = {
        "post_text": f"ü§ñ URL –ø–æ—Å—Ç –≤ {timestamp_str}", 
        "publish_at": publish_time_2.isoformat(),
        "image_url": "https://i.imgur.com/gT762v2.jpeg" # –ù–∞–¥–µ–∂–Ω—ã–π URL –¥–ª—è —Ç–µ—Å—Ç–∞
    }

    print(f"\n[STEP 2] –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–≤—É—Ö –ø–æ—Å—Ç–æ–≤:")
    print(f" - –ü–æ—Å—Ç 1 –Ω–∞ {publish_time_1.isoformat()}")
    print(f" - –ü–æ—Å—Ç 2 –Ω–∞ {publish_time_2.isoformat()}")

    resp = await async_client.post("/api/v1/posts/schedule-batch", headers=headers, json={"posts": [post_1_data, post_2_data]})
    assert resp.status_code == 201, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø–æ—Å—Ç–æ–≤: {resp.text}"
    
    # –§–∏–∫—Å–∏—Ä—É–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é, —á—Ç–æ–±—ã –≤–æ—Ä–∫–µ—Ä —É–≤–∏–¥–µ–ª –∑–∞–¥–∞—á–∏
    await db_session.commit()
    post_ids = [p['id'] for p in resp.json()]
    print(f"[STEP 2] –ü–æ—Å—Ç—ã (IDs: {post_ids}) —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω—ã.")

    # --- –®–ê–ì 3: –ó–∞–ø—É—Å–∫–∞–µ–º –≤–æ—Ä–∫–µ—Ä –∏ –∂–¥–µ–º –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –æ–±–æ–∏—Ö –ø–æ—Å—Ç–æ–≤ ---
    wait_duration = 50 # —Å–µ–∫—É–Ω–¥
    print(f"\n[STEP 3] –ó–∞–ø—É—Å–∫–∞–µ–º –≤–æ—Ä–∫–µ—Ä –∏ –∂–¥–µ–º {wait_duration} —Å–µ–∫—É–Ω–¥...")
    await run_worker_for_duration(wait_duration)
    
    # --- –®–ê–ì 4: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç ---
    posts = (await db_session.execute(select(ScheduledPost).where(ScheduledPost.id.in_(post_ids)))).scalars().all()
    
    published_posts = [p for p in posts if p.status == ScheduledPostStatus.published]
    failed_posts = [p for p in posts if p.status == ScheduledPostStatus.failed]

    print("\n--- –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ü–£–ë–õ–ò–ö–ê–¶–ò–ò ---")
    print(f"–û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ: {len(published_posts)}")
    print(f"–û—à–∏–±–æ–∫: {len(failed_posts)}")
    for p in failed_posts:
        print(f"  - –ü–æ—Å—Ç ID {p.id} –ø—Ä–æ–≤–∞–ª–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π: {p.error_message}")
    
    assert len(published_posts) == 2, "–û–∂–∏–¥–∞–ª–æ—Å—å, —á—Ç–æ –æ–±–∞ –ø–æ—Å—Ç–∞ –±—É–¥—É—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ."
    print("‚úì –û–±–∞ –ø–æ—Å—Ç–∞ —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω—ã –≤ VK. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–≤–æ—é —Å—Ç—Ä–∞–Ω–∏—Ü—É.")

    # --- –®–ê–ì 5: –û—á–∏—Å—Ç–∫–∞ (–æ—Ç–∫–ª—é—á–µ–Ω–æ –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É) ---
    # print("\n–û—á–∏—Å—Ç–∫–∞ –ø–æ—Å—Ç–æ–≤ –∏–∑ VK –æ—Ç–∫–ª—é—á–µ–Ω–∞.")
    # for post in published_posts:
    #     if post.vk_post_id:
    #         print(f"–û—á–∏—Å—Ç–∫–∞: —É–¥–∞–ª—è–µ–º –ø–æ—Å—Ç {post.vk_post_id} –∏–∑ VK...")
    #         await vk_api_client.wall.delete(post_id=int(post.vk_post_id), owner_id=user.vk_id)
    #         await asyncio.sleep(1)