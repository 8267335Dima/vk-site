# backend/tests/test_content_tasks.py

import pytest
import datetime
import asyncio
from httpx import AsyncClient
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy import select
from pathlib import Path
from arq.connections import create_pool

from app.db.models import ScheduledPost, ScheduledPostStatus
from app.tasks.system_tasks import publish_scheduled_post_task
from app.arq_config import redis_settings
from tests.utils.task_runner import run_and_verify_task

TESTS_ROOT_DIR = Path(__file__).parent 

@pytest.fixture(scope="module", autouse=True)
def create_test_assets_folder():
    assets_dir = TESTS_ROOT_DIR / "assets"
    assets_dir.mkdir(parents=True, exist_ok=True)
    (assets_dir / "test_image_1.jpg").touch()
    (assets_dir / "test_image_2.jpg").touch()
    print(f"\n[PREP] –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤ –ø–∞–ø–∫–µ '{assets_dir.resolve()}' –µ—Å—Ç—å —Ñ–∞–π–ª—ã 'test_image_1.jpg' –∏ 'test_image_2.jpg'")

async def test_task_like_feed(async_client: AsyncClient, db_session: AsyncSession, authorized_user_and_headers: tuple):
    user, headers = authorized_user_and_headers
    await run_and_verify_task(async_client, db_session, headers, "like_feed", {"count": 3, "filters": {}}, user.id)

async def test_task_view_stories(async_client: AsyncClient, db_session: AsyncSession, authorized_user_and_headers: tuple):
    user, headers = authorized_user_and_headers
    await run_and_verify_task(async_client, db_session, headers, "view_stories", {}, user.id)


async def test_full_posting_cycle(
    async_client: AsyncClient,
    db_session: AsyncSession,
    authorized_user_and_headers: tuple
):
    """
    –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–ª–Ω—ã–π —Ü–∏–∫–ª: –∑–∞–≥—Ä—É–∑–∫–∞, –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ 2 –ø–æ—Å—Ç–æ–≤ –∏ –∏—Ö –ø–æ–æ—á–µ—Ä–µ–¥–Ω–∞—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è.
    """
    user, headers = authorized_user_and_headers
    
    # === –®–ê–ì 1: –ó–ê–ì–†–£–ó–ö–ê –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–ô ===
    
    # 1.1. –ó–∞–≥—Ä—É–∑–∫–∞ –¥–≤—É—Ö –ª–æ–∫–∞–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
    print("\n[STEP 1.1] –ü–∞–∫–µ—Ç–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –¥–≤—É—Ö –ª–æ–∫–∞–ª—å–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π...")
    image_paths = [TESTS_ROOT_DIR / "assets/test_image_1.jpg", TESTS_ROOT_DIR / "assets/test_image_2.jpg"]
    with open(image_paths[0], 'rb') as f1, open(image_paths[1], 'rb') as f2:
        files_to_upload = [
            ('images', (image_paths[0].name, f1, 'image/jpeg')),
            ('images', (image_paths[1].name, f2, 'image/jpeg'))
        ]
        upload_resp_local = await async_client.post("/api/v1/posts/upload-images-batch", headers=headers, files=files_to_upload)
    assert upload_resp_local.status_code == 200
    attachment_ids_local = upload_resp_local.json()["attachment_ids"]
    assert len(attachment_ids_local) == 2

    # 1.2. –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ URL
    pixiv_image_url = "https://i.pximg.net/img-master/img/2025/05/01/22/28/57/129918823_p0_master1200.jpg"
    print(f"[STEP 1.2] –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ URL: {pixiv_image_url}")
    upload_resp_url = await async_client.post("/api/v1/posts/upload-image-from-url", headers=headers, json={"image_url": pixiv_image_url})
    assert upload_resp_url.status_code == 200
    attachment_id_url = upload_resp_url.json()["attachment_id"]
    
    print("[STEP 1] –í—Å–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã.")

    # === –®–ê–ì 2: –ü–ê–ö–ï–¢–ù–û–ï –ü–õ–ê–ù–ò–†–û–í–ê–ù–ò–ï ===
    now = datetime.datetime.now(datetime.timezone.utc)
    timestamp_str = f"{now:%H:%M:%S}"
    
    # –ü–æ—Å—Ç 1 —á–µ—Ä–µ–∑ 15 —Å–µ–∫—É–Ω–¥
    publish_time_1 = now + datetime.timedelta(seconds=15)
    post_1_data = {
        "post_text": f"ü§ñ –ü–æ—Å—Ç ‚Ññ1 (2 –ª–æ–∫–∞–ª—å–Ω—ã—Ö —Ñ–æ—Ç–æ) –≤ {timestamp_str}",
        "publish_at": publish_time_1.isoformat(),
        "attachments": attachment_ids_local
    }
    
    # –ü–æ—Å—Ç 2 —á–µ—Ä–µ–∑ 45 —Å–µ–∫—É–Ω–¥ (30 —Å–µ–∫—É–Ω–¥ –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–≥–æ)
    publish_time_2 = now + datetime.timedelta(seconds=45)
    post_2_data = {
        "post_text": f"ü§ñ –ü–æ—Å—Ç ‚Ññ2 (—Ñ–æ—Ç–æ –ø–æ URL) –≤ {timestamp_str}",
        "publish_at": publish_time_2.isoformat(),
        "attachments": [attachment_id_url]
    }

    print(f"\n[STEP 2] –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–≤—É—Ö –ø–æ—Å—Ç–æ–≤:\n - –ü–æ—Å—Ç 1 –Ω–∞ {publish_time_1}\n - –ü–æ—Å—Ç 2 –Ω–∞ {publish_time_2}")
    resp = await async_client.post("/api/v1/posts/schedule-batch", headers=headers, json={"posts": [post_1_data, post_2_data]})
    assert resp.status_code == 201
    await db_session.commit() # –§–∏–∫—Å–∏—Ä—É–µ–º, —á—Ç–æ–±—ã –∑–∞–¥–∞—á–∞ –±—ã–ª–∞ –≤–∏–¥–Ω–∞
    post_ids = [p['id'] for p in resp.json()]
    assert len(post_ids) == 2
    print(f"[STEP 2] –ü–æ—Å—Ç—ã (IDs: {post_ids}) —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω—ã.")

    # === –®–ê–ì 3: –ò–ú–ò–¢–ê–¶–ò–Ø –†–ê–ë–û–¢–´ –í–û–†–ö–ï–†–ê ===
    print("\n[STEP 3] –ò–º–∏—Ç–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã –≤–æ—Ä–∫–µ—Ä–∞...")
    arq_pool = await create_pool(redis_settings)
    worker_context = {'redis_pool': arq_pool}

    try:
        # –û–∂–∏–¥–∞–Ω–∏–µ –∏ –∑–∞–ø—É—Å–∫ –ø–µ—Ä–≤–æ–π –∑–∞–¥–∞—á–∏
        await asyncio.sleep(16)
        print(f"[{datetime.datetime.now():%H:%M:%S}] –í—Ä–µ–º—è –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ –ø–æ—Å—Ç–∞. –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–¥–∞—á—É –¥–ª—è ID {post_ids[0]}...")
        await publish_scheduled_post_task(worker_context, post_id=post_ids[0], db_session_for_test=db_session)

        # –û–∂–∏–¥–∞–Ω–∏–µ –∏ –∑–∞–ø—É—Å–∫ –≤—Ç–æ—Ä–æ–π –∑–∞–¥–∞—á–∏
        await asyncio.sleep(30)
        print(f"[{datetime.datetime.now():%H:%M:%S}] –í—Ä–µ–º—è –¥–ª—è –≤—Ç–æ—Ä–æ–≥–æ –ø–æ—Å—Ç–∞. –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–¥–∞—á—É –¥–ª—è ID {post_ids[1]}...")
        await publish_scheduled_post_task(worker_context, post_id=post_ids[1], db_session_for_test=db_session)
    finally:
        await arq_pool.close()
    
    print("[STEP 3] –ò–º–∏—Ç–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")
    
    # === –®–ê–ì 4: –ü–†–û–í–ï–†–ö–ê –†–ï–ó–£–õ–¨–¢–ê–¢–û–í ===
    await db_session.commit() # –ö–æ–º–º–∏—Ç–∏–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ—Å–ª–µ —Ä–∞–±–æ—Ç—ã –∑–∞–¥–∞—á
    posts = (await db_session.execute(select(ScheduledPost).where(ScheduledPost.id.in_(post_ids)))).scalars().all()
    published_posts = [p for p in posts if p.status == ScheduledPostStatus.published]

    print("\n--- –§–ò–ù–ê–õ–¨–ù–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´ ---")
    assert len(published_posts) == 2, f"–û–∂–∏–¥–∞–ª–æ—Å—å 2 –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç–∞, –Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ {len(published_posts)}."
    
    for post in posts:
        print(f"  - –ü–æ—Å—Ç ID {post.id}: –°—Ç–∞—Ç—É—Å - {post.status.value}, VK ID - {post.vk_post_id or 'N/A'}")

    print("‚úì –û–±–∞ –ø–æ—Å—Ç–∞ —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω—ã –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–∞—à—É —Å—Ç—Ä–∞–Ω–∏—Ü—É VK.")