# backend/tests/test_content_tasks.py

import pytest
import datetime
import asyncio
from httpx import AsyncClient
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy import select
from pathlib import Path

from app.db.models import User, ScheduledPost
from app.services.vk_api import VKAPI
from tests.utils.task_runner import run_and_verify_task, run_worker_for_duration

pytestmark = pytest.mark.asyncio

@pytest.fixture(scope="module", autouse=True)
def create_test_assets_folder():
    """–°–æ–∑–¥–∞–µ—Ç –ø–∞–ø–∫—É –¥–ª—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π, –µ—Å–ª–∏ –µ–µ –Ω–µ—Ç."""
    assets_dir = Path("backend/tests/assets")
    assets_dir.mkdir(exist_ok=True)
    # –í—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å —Å—é–¥–∞ –∫–æ–¥ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –∫–∞—Ä—Ç–∏–Ω–æ–∫, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
    # –ù–∞–ø—Ä–∏–º–µ—Ä, —Å –ø–æ–º–æ—â—å—é requests –∏–ª–∏ aiohttp
    print(f"\n[PREP] –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤ –ø–∞–ø–∫–µ '{assets_dir.resolve()}' –µ—Å—Ç—å —Ñ–∞–π–ª—ã 'test_image_1.jpg' –∏ 'test_image_2.jpg'")

async def test_task_like_feed(async_client: AsyncClient, db_session: AsyncSession, authorized_user_and_headers: tuple):
    user, headers = authorized_user_and_headers
    payload = {"count": 3, "filters": {}}
    await run_and_verify_task(async_client, db_session, headers, "like_feed", payload, user.id)

async def test_task_view_stories(async_client: AsyncClient, db_session: AsyncSession, authorized_user_and_headers: tuple):
    user, headers = authorized_user_and_headers
    await run_and_verify_task(async_client, db_session, headers, "view_stories", {}, user.id)

async def test_batch_upload_from_file(async_client: AsyncClient, authorized_user_and_headers: tuple):
    _, headers = authorized_user_and_headers
    print("\n--- –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞: –ü–ê–ö–ï–¢–ù–ê–Ø –ó–ê–ì–†–£–ó–ö–ê –§–ê–ô–õ–û–í ---")
    
    image_paths = [Path("backend/tests/assets/test_image_1.jpg"), Path("backend/tests/assets/test_image_2.jpg")]
    for path in image_paths:
        if not path.exists():
            pytest.fail(f"–¢–µ—Å—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ: {path.resolve()}.")

    files_to_upload = [('images', (p.name, open(p, 'rb'), 'image/jpeg')) for p in image_paths]
    
    upload_resp = await async_client.post("/api/v1/posts/upload-images-batch", headers=headers, files=files_to_upload)
    
    for _, file_tuple in files_to_upload:
        file_tuple[1].close()

    assert upload_resp.status_code == 200, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞–∫–µ—Ç–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–µ: {upload_resp.text}"
    attachment_ids = upload_resp.json().get("attachment_ids", [])
    
    assert len(attachment_ids) == len(image_paths), "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ ID –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —Ñ–∞–π–ª–æ–≤."
    print(f"‚úì –ü–∞–∫–µ—Ç–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ {len(attachment_ids)} —Ñ–∞–π–ª–æ–≤ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ.")


async def test_batch_schedule_posts(async_client: AsyncClient, db_session: AsyncSession, authorized_user_and_headers: tuple, vk_api_client: VKAPI):
    print("\n--- –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞: –ü–ê–ö–ï–¢–ù–û–ï –ü–õ–ê–ù–ò–†–û–í–ê–ù–ò–ï –ü–û–°–¢–û–í ---")
    user, headers = authorized_user_and_headers

    now = datetime.datetime.now(datetime.timezone.utc)
    posts_to_schedule = [
        {"post_text": f"ü§ñ –ü–∞–∫–µ—Ç–Ω—ã–π –ø–æ—Å—Ç ‚Ññ1 (—Ç–µ–∫—Å—Ç). –ü—É–±–ª–∏–∫–∞—Ü–∏—è —á–µ—Ä–µ–∑ 30 —Å–µ–∫. {int(now.timestamp())}", "publish_at": (now + datetime.timedelta(seconds=30)).isoformat()},
        {"image_url": "https://i.imgur.com/g2c3v4j.jpeg", "publish_at": (now + datetime.timedelta(seconds=60)).isoformat()}
    ]
    batch_payload = {"posts": posts_to_schedule}

    create_resp = await async_client.post("/api/v1/posts/schedule-batch", headers=headers, json=batch_payload)
    assert create_resp.status_code == 201, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞–∫–µ—Ç–Ω–æ–º –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏: {create_resp.text}"
    created_posts_info = create_resp.json()
    post_ids = [p['id'] for p in created_posts_info]
    print(f"[ACTION] ‚úì –£—Å–ø–µ—à–Ω–æ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ {len(post_ids)} –ø–æ—Å—Ç–æ–≤. –û–Ω–∏ –ø–æ—è–≤—è—Ç—Å—è –Ω–∞ —Å—Ç–µ–Ω–µ —á–µ—Ä–µ–∑ 30 –∏ 60 —Å–µ–∫—É–Ω–¥.")

    await run_worker_for_duration(70)

    print("[VERIFY] –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–æ–≤ –≤—Å–µ—Ö –ø–æ—Å—Ç–æ–≤ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...")
    db_session.expire_all()
    stmt = select(ScheduledPost).where(ScheduledPost.id.in_(post_ids))
    published_posts = (await db_session.execute(stmt)).scalars().all()
    
    assert len(published_posts) == len(post_ids)
    
    published_vk_ids = []
    for post in published_posts:
        assert post.status.value == "published", f"–ü–æ—Å—Ç ID={post.id} –Ω–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω! –°—Ç–∞—Ç—É—Å: {post.status.value}"
        published_vk_ids.append(post.vk_post_id)
    
    print("‚úì –í—Å–µ –ø–æ—Å—Ç—ã —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω—ã!")
    for i, vk_id in enumerate(published_vk_ids):
        print(f"  - –ü–æ—Å—Ç {i+1}: https://vk.com/wall{user.vk_id}_{vk_id}")

    print("[CLEANUP] –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤...")
    for vk_id in published_vk_ids:
        await vk_api_client._make_request("wall.delete", params={"post_id": vk_id})
        await asyncio.sleep(1)
    print("[CLEANUP] ‚úì –¢–µ—Å—Ç–æ–≤—ã–µ –ø–æ—Å—Ç—ã —É–¥–∞–ª–µ–Ω—ã.")