# backend/tests/test_messaging_tasks.py
import pytest
import datetime
import random
from httpx import AsyncClient
from sqlalchemy.ext.asyncio import AsyncSession
from app.db.models import User
from app.services.vk_api import VKAPI
from tests.utils.task_runner import run_and_verify_task

pytestmark = pytest.mark.asyncio

async def test_real_mass_messaging_to_friends(async_client: AsyncClient, db_session: AsyncSession, authorized_user_and_headers: tuple, vk_api_client: VKAPI):
    """
    –¢–µ—Å—Ç –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç 2 –†–ï–ê–õ–¨–ù–´–• —Å–æ–æ–±—â–µ–Ω–∏—è –¥–≤—É–º —Å–ª—É—á–∞–π–Ω—ã–º –¥—Ä—É–∑—å—è–º,
    –∫–æ—Ç–æ—Ä—ã–µ —Å–µ–π—á–∞—Å –æ–Ω–ª–∞–π–Ω.
    """
    user, headers = authorized_user_and_headers
    
    # –ù–∞—Ö–æ–¥–∏–º —Ü–µ–ª–∏
    friends = await vk_api_client.get_user_friends(user.vk_id, fields="online")
    online_friends = [f for f in friends['items'] if f.get('online')]
    
    message_count = 2
    assert len(online_friends) >= message_count, f"–î–ª—è —Ç–µ—Å—Ç–∞ –Ω—É–∂–Ω–æ –∫–∞–∫ –º–∏–Ω–∏–º—É–º {message_count} –¥—Ä—É–≥–∞ –æ–Ω–ª–∞–π–Ω."
    
    targets = random.sample(online_friends, message_count)
    target_names = [f"{t['first_name']} {t['last_name']}" for t in targets]
    print(f"[PREP] –í—ã–±—Ä–∞–Ω—ã —Ä–µ–∞–ª—å–Ω—ã–µ —Ü–µ–ª–∏ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏: {', '.join(target_names)}")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á—É
    message = f"ü§ñ –ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç Pytest {int(datetime.datetime.utcnow().timestamp())}. –ù–µ –æ–±—Ä–∞—â–∞–π –≤–Ω–∏–º–∞–Ω–∏—è."
    payload = {
        "count": message_count, 
        "message_text": message,
        "filters": {"is_online": True, "allow_closed_profiles": True}
    }
    
    task_result = await run_and_verify_task(async_client, db_session, headers, "mass_messaging", payload, user.id)
    print("‚úì –ó–∞–¥–∞—á–∞ —Ä–∞—Å—Å—ã–ª–∫–∏ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —É—Å–ø–µ—à–Ω–æ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–∞—à–∏ –¥–∏–∞–ª–æ–≥–∏ –≤ VK.")