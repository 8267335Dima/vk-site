"""Initial schema

Revision ID: a6bf2f7a264a
Revises: 
Create Date: 2025-09-10 01:26:44.832415

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = 'a6bf2f7a264a'
down_revision: Union[str, Sequence[str], None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('users',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('vk_id', sa.BigInteger(), nullable=False),
    sa.Column('encrypted_vk_token', sa.String(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('plan', sa.String(), server_default='Базовый', nullable=False),
    sa.Column('plan_expires_at', sa.DateTime(), nullable=True),
    sa.Column('is_admin', sa.Boolean(), server_default='false', nullable=False),
    sa.Column('daily_likes_limit', sa.Integer(), server_default=sa.text('0'), nullable=False),
    sa.Column('daily_add_friends_limit', sa.Integer(), server_default=sa.text('0'), nullable=False),
    sa.Column('delay_profile', sa.Enum('slow', 'normal', 'fast', name='delayprofile'), server_default='normal', nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_users_id'), 'users', ['id'], unique=False)
    op.create_index(op.f('ix_users_vk_id'), 'users', ['vk_id'], unique=True)
    op.create_table('action_logs',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('action_type', sa.String(), nullable=False),
    sa.Column('message', sa.String(), nullable=False),
    sa.Column('target_url', sa.String(), nullable=True),
    sa.Column('status', sa.String(), nullable=False),
    sa.Column('timestamp', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_action_logs_id'), 'action_logs', ['id'], unique=False)
    op.create_index(op.f('ix_action_logs_timestamp'), 'action_logs', ['timestamp'], unique=False)
    op.create_index(op.f('ix_action_logs_user_id'), 'action_logs', ['user_id'], unique=False)
    op.create_table('automations',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('automation_type', sa.String(), nullable=False),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('settings', sa.JSON(), nullable=True),
    sa.Column('last_run_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('user_id', 'automation_type', name='_user_automation_uc')
    )
    op.create_index(op.f('ix_automations_automation_type'), 'automations', ['automation_type'], unique=False)
    op.create_index(op.f('ix_automations_user_id'), 'automations', ['user_id'], unique=False)
    op.create_table('daily_stats',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('date', sa.Date(), nullable=False),
    sa.Column('likes_count', sa.Integer(), nullable=False),
    sa.Column('friends_added_count', sa.Integer(), nullable=False),
    sa.Column('friend_requests_accepted_count', sa.Integer(), nullable=False),
    sa.Column('stories_viewed_count', sa.Integer(), nullable=False),
    sa.Column('like_friends_feed_count', sa.Integer(), nullable=False),
    sa.Column('friends_removed_count', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('user_id', 'date', name='_user_date_uc')
    )
    op.create_index('ix_daily_stats_user_date', 'daily_stats', ['user_id', 'date'], unique=False)
    op.create_table('login_history',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('ip_address', sa.String(), nullable=False),
    sa.Column('user_agent', sa.String(), nullable=True),
    sa.Column('login_timestamp', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_login_history_user_id'), 'login_history', ['user_id'], unique=False)
    op.create_table('monthly_stats',
    sa.Column('month_identifier', sa.String(), nullable=False),
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('likes_count', sa.Integer(), nullable=False),
    sa.Column('friends_added_count', sa.Integer(), nullable=False),
    sa.Column('friend_requests_accepted_count', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('user_id', 'month_identifier', name='_user_month_uc')
    )
    op.create_table('notifications',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('message', sa.String(), nullable=False),
    sa.Column('level', sa.String(), nullable=False),
    sa.Column('is_read', sa.Boolean(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_notifications_created_at'), 'notifications', ['created_at'], unique=False)
    op.create_index(op.f('ix_notifications_is_read'), 'notifications', ['is_read'], unique=False)
    op.create_index(op.f('ix_notifications_user_id'), 'notifications', ['user_id'], unique=False)
    op.create_table('payments',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('payment_system_id', sa.String(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('amount', sa.Float(), nullable=False),
    sa.Column('status', sa.String(), nullable=False),
    sa.Column('plan_name', sa.String(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_payments_payment_system_id'), 'payments', ['payment_system_id'], unique=True)
    op.create_index(op.f('ix_payments_user_id'), 'payments', ['user_id'], unique=False)
    op.create_table('proxies',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('encrypted_proxy_url', sa.String(), nullable=False),
    sa.Column('is_working', sa.Boolean(), nullable=False),
    sa.Column('last_checked_at', sa.DateTime(), nullable=True),
    sa.Column('check_status_message', sa.String(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('user_id', 'encrypted_proxy_url', name='_user_proxy_uc')
    )
    op.create_index(op.f('ix_proxies_is_working'), 'proxies', ['is_working'], unique=False)
    op.create_index(op.f('ix_proxies_user_id'), 'proxies', ['user_id'], unique=False)
    op.create_table('scenarios',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('schedule', sa.String(), nullable=False),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('last_run_at', sa.DateTime(), nullable=True),
    sa.Column('next_run_at', sa.DateTime(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_scenarios_next_run_at'), 'scenarios', ['next_run_at'], unique=False)
    op.create_index(op.f('ix_scenarios_user_id'), 'scenarios', ['user_id'], unique=False)
    op.create_table('sent_congratulations',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('friend_vk_id', sa.BigInteger(), nullable=False),
    sa.Column('year', sa.Integer(), nullable=False),
    sa.Column('sent_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('user_id', 'friend_vk_id', 'year', name='_user_friend_year_uc')
    )
    op.create_index(op.f('ix_sent_congratulations_friend_vk_id'), 'sent_congratulations', ['friend_vk_id'], unique=False)
    op.create_index(op.f('ix_sent_congratulations_user_id'), 'sent_congratulations', ['user_id'], unique=False)
    op.create_table('task_history',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('celery_task_id', sa.String(), nullable=True),
    sa.Column('task_name', sa.String(), nullable=False),
    sa.Column('status', sa.String(), nullable=False),
    sa.Column('parameters', sa.JSON(), nullable=True),
    sa.Column('result', sa.Text(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_task_history_celery_task_id'), 'task_history', ['celery_task_id'], unique=True)
    op.create_index(op.f('ix_task_history_status'), 'task_history', ['status'], unique=False)
    op.create_index(op.f('ix_task_history_task_name'), 'task_history', ['task_name'], unique=False)
    op.create_index(op.f('ix_task_history_user_id'), 'task_history', ['user_id'], unique=False)
    op.create_index('ix_task_history_user_status', 'task_history', ['user_id', 'status'], unique=False)
    op.create_table('weekly_stats',
    sa.Column('week_identifier', sa.String(), nullable=False),
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('likes_count', sa.Integer(), nullable=False),
    sa.Column('friends_added_count', sa.Integer(), nullable=False),
    sa.Column('friend_requests_accepted_count', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('user_id', 'week_identifier', name='_user_week_uc')
    )
    op.create_table('scenario_steps',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('scenario_id', sa.Integer(), nullable=False),
    sa.Column('step_order', sa.Integer(), nullable=False),
    sa.Column('action_type', sa.String(), nullable=False),
    sa.Column('settings', sa.JSON(), nullable=False),
    sa.ForeignKeyConstraint(['scenario_id'], ['scenarios.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_scenario_steps_scenario_id'), 'scenario_steps', ['scenario_id'], unique=False)
    op.drop_table('celery_clockedschedule')
    op.drop_table('celery_solarschedule')
    op.drop_table('celery_intervalschedule')
    op.drop_table('celery_crontabschedule')
    op.drop_table('celery_periodictaskchanged')
    op.drop_table('celery_periodictask')
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('celery_periodictask',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(length=255), autoincrement=False, nullable=False, comment='Short Description For This Task'),
    sa.Column('task', sa.VARCHAR(length=255), autoincrement=False, nullable=False, comment='The Name of the Celery Task that Should be Run.  (Example: "proj.tasks.import_contacts")'),
    sa.Column('args', sa.TEXT(), autoincrement=False, nullable=False, comment='JSON encoded positional arguments (Example: ["arg1", "arg2"])'),
    sa.Column('kwargs', sa.TEXT(), autoincrement=False, nullable=False, comment='JSON encoded keyword arguments (Example: {"argument": "value"})'),
    sa.Column('queue', sa.VARCHAR(length=255), autoincrement=False, nullable=True, comment='Queue defined in CELERY_TASK_QUEUES. Leave None for default queuing.'),
    sa.Column('exchange', sa.VARCHAR(length=255), autoincrement=False, nullable=True, comment='Override Exchange for low-level AMQP routing'),
    sa.Column('routing_key', sa.VARCHAR(length=255), autoincrement=False, nullable=True, comment='Override Routing Key for low-level AMQP routing'),
    sa.Column('headers', sa.TEXT(), autoincrement=False, nullable=True, comment='JSON encoded message headers for the AMQP message.'),
    sa.Column('priority', sa.INTEGER(), autoincrement=False, nullable=True, comment='Priority Number between 0 and 255. Supported by: RabbitMQ, Redis (priority reversed, 0 is highest).'),
    sa.Column('expires', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True, comment='Datetime after which the schedule will no longer trigger the task to run'),
    sa.Column('expire_seconds', sa.INTEGER(), autoincrement=False, nullable=True, comment='Timedelta with seconds which the schedule will no longer trigger the task to run'),
    sa.Column('one_off', sa.BOOLEAN(), autoincrement=False, nullable=False, comment='If True, the schedule will only run the task a single time'),
    sa.Column('start_time', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True, comment='Datetime when the schedule should begin triggering the task to run'),
    sa.Column('enabled', sa.BOOLEAN(), autoincrement=False, nullable=False, comment='Set to False to disable the schedule'),
    sa.Column('last_run_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True, comment='Datetime that the schedule last triggered the task to run. '),
    sa.Column('total_run_count', sa.INTEGER(), autoincrement=False, nullable=False, comment='Running count of how many times the schedule has triggered the task'),
    sa.Column('date_changed', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True, comment='Datetime that this PeriodicTask was last modified'),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True, comment='Detailed description about the details of this Periodic Task'),
    sa.Column('discriminator', sa.VARCHAR(length=20), autoincrement=False, nullable=False, comment='Lower case name of the schedule class. '),
    sa.Column('schedule_id', sa.INTEGER(), autoincrement=False, nullable=False, comment='ID of the schedule model object. '),
    sa.CheckConstraint('priority >= 0 AND priority <= 255', name=op.f('celery_periodictask_priority_check')),
    sa.PrimaryKeyConstraint('id', name=op.f('celery_periodictask_pkey')),
    sa.UniqueConstraint('name', name=op.f('celery_periodictask_name_key'), postgresql_include=[], postgresql_nulls_not_distinct=False)
    )
    op.create_table('celery_periodictaskchanged',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('last_update', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name=op.f('celery_periodictaskchanged_pkey'))
    )
    op.create_table('celery_crontabschedule',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('minute', sa.VARCHAR(length=240), autoincrement=False, nullable=False, comment='Cron Minutes to Run. Use "*" for "all". (Example: "0,30")'),
    sa.Column('hour', sa.VARCHAR(length=96), autoincrement=False, nullable=False, comment='Cron Hours to Run. Use "*" for "all". (Example: "8,20")'),
    sa.Column('day_of_week', sa.VARCHAR(length=64), autoincrement=False, nullable=False, comment='Cron Days Of The Week to Run. Use "*" for "all", Sunday is 0 or 7, Monday is 1. (Example: "0,5")'),
    sa.Column('day_of_month', sa.VARCHAR(length=124), autoincrement=False, nullable=False, comment='Cron Days Of The Month to Run. Use "*" for "all". (Example: "1,15")'),
    sa.Column('month_of_year', sa.VARCHAR(length=64), autoincrement=False, nullable=False, comment='Cron Months (1-12) Of The Year to Run. Use "*" for "all". (Example: "1,12")'),
    sa.Column('timezone', sa.VARCHAR(length=64), autoincrement=False, nullable=False, comment='Timezone to Run the Cron Schedule on. Default is UTC.'),
    sa.PrimaryKeyConstraint('id', name=op.f('celery_crontabschedule_pkey'))
    )
    op.create_table('celery_intervalschedule',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('every', sa.INTEGER(), autoincrement=False, nullable=False, comment='Number of interval periods to wait before running the task again'),
    sa.Column('period', postgresql.ENUM('days', 'hours', 'minutes', 'seconds', 'microseconds', name='period'), autoincrement=False, nullable=False, comment='The type of period between task runs (Example: days)'),
    sa.CheckConstraint('every >= 1', name=op.f('celery_intervalschedule_every_check')),
    sa.PrimaryKeyConstraint('id', name=op.f('celery_intervalschedule_pkey'))
    )
    op.create_table('celery_solarschedule',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('event', postgresql.ENUM('dawn_astronomical', 'dawn_nautical', 'dawn_civil', 'sunrise', 'solar_noon', 'sunset', 'dusk_civil', 'dusk_nautical', 'dusk_astronomical', name='solarevent'), autoincrement=False, nullable=False, comment='The type of solar event when the job should run'),
    sa.Column('latitude', sa.NUMERIC(precision=9, scale=6), autoincrement=False, nullable=False, comment='Run the task when the event happens at this latitude'),
    sa.Column('longitude', sa.NUMERIC(precision=9, scale=6), autoincrement=False, nullable=False, comment='Run the task when the event happens at this longitude'),
    sa.CheckConstraint("latitude >= '-90'::integer::numeric AND latitude <= 90::numeric", name=op.f('celery_solarschedule_latitude_check')),
    sa.CheckConstraint("longitude >= '-180'::integer::numeric AND longitude <= 180::numeric", name=op.f('celery_solarschedule_longitude_check')),
    sa.PrimaryKeyConstraint('id', name=op.f('celery_solarschedule_pkey')),
    sa.UniqueConstraint('event', 'latitude', 'longitude', name=op.f('celery_solarschedule_event_latitude_longitude_key'), postgresql_include=[], postgresql_nulls_not_distinct=False)
    )
    op.create_table('celery_clockedschedule',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('clocked_time', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('celery_clockedschedule_pkey'))
    )
    op.drop_index(op.f('ix_scenario_steps_scenario_id'), table_name='scenario_steps')
    op.drop_table('scenario_steps')
    op.drop_table('weekly_stats')
    op.drop_index('ix_task_history_user_status', table_name='task_history')
    op.drop_index(op.f('ix_task_history_user_id'), table_name='task_history')
    op.drop_index(op.f('ix_task_history_task_name'), table_name='task_history')
    op.drop_index(op.f('ix_task_history_status'), table_name='task_history')
    op.drop_index(op.f('ix_task_history_celery_task_id'), table_name='task_history')
    op.drop_table('task_history')
    op.drop_index(op.f('ix_sent_congratulations_user_id'), table_name='sent_congratulations')
    op.drop_index(op.f('ix_sent_congratulations_friend_vk_id'), table_name='sent_congratulations')
    op.drop_table('sent_congratulations')
    op.drop_index(op.f('ix_scenarios_user_id'), table_name='scenarios')
    op.drop_index(op.f('ix_scenarios_next_run_at'), table_name='scenarios')
    op.drop_table('scenarios')
    op.drop_index(op.f('ix_proxies_user_id'), table_name='proxies')
    op.drop_index(op.f('ix_proxies_is_working'), table_name='proxies')
    op.drop_table('proxies')
    op.drop_index(op.f('ix_payments_user_id'), table_name='payments')
    op.drop_index(op.f('ix_payments_payment_system_id'), table_name='payments')
    op.drop_table('payments')
    op.drop_index(op.f('ix_notifications_user_id'), table_name='notifications')
    op.drop_index(op.f('ix_notifications_is_read'), table_name='notifications')
    op.drop_index(op.f('ix_notifications_created_at'), table_name='notifications')
    op.drop_table('notifications')
    op.drop_table('monthly_stats')
    op.drop_index(op.f('ix_login_history_user_id'), table_name='login_history')
    op.drop_table('login_history')
    op.drop_index('ix_daily_stats_user_date', table_name='daily_stats')
    op.drop_table('daily_stats')
    op.drop_index(op.f('ix_automations_user_id'), table_name='automations')
    op.drop_index(op.f('ix_automations_automation_type'), table_name='automations')
    op.drop_table('automations')
    op.drop_index(op.f('ix_action_logs_user_id'), table_name='action_logs')
    op.drop_index(op.f('ix_action_logs_timestamp'), table_name='action_logs')
    op.drop_index(op.f('ix_action_logs_id'), table_name='action_logs')
    op.drop_table('action_logs')
    op.drop_index(op.f('ix_users_vk_id'), table_name='users')
    op.drop_index(op.f('ix_users_id'), table_name='users')
    op.drop_table('users')
    # ### end Alembic commands ###
