"""add timezone

Revision ID: 269442c7b4b5
Revises: 6722090930ea
Create Date: 2025-09-19 04:47:14.491618

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = '269442c7b4b5'
down_revision: Union[str, Sequence[str], None] = '6722090930ea'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('plans',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name_id', sa.String(), nullable=False),
    sa.Column('display_name', sa.String(), nullable=False),
    sa.Column('description', sa.Text(), nullable=False),
    sa.Column('base_price', sa.Float(), nullable=True),
    sa.Column('limits', sa.JSON(), nullable=False),
    sa.Column('available_features', sa.JSON(), nullable=False),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('is_popular', sa.Boolean(), nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_plans'))
    )
    op.create_index(op.f('ix_plans_name_id'), 'plans', ['name_id'], unique=True)
    op.create_unique_constraint('_user_automation_uc', 'automations', ['user_id', 'automation_type'])
    op.create_unique_constraint('_user_friend_year_uc', 'sent_congratulations', ['user_id', 'friend_vk_id', 'year'])
    op.add_column('task_history', sa.Column('started_at', sa.DateTime(timezone=True), nullable=True))
    op.add_column('task_history', sa.Column('finished_at', sa.DateTime(timezone=True), nullable=True))
    op.add_column('users', sa.Column('last_active_at', sa.DateTime(timezone=True), nullable=True))
    op.add_column('users', sa.Column('is_frozen', sa.Boolean(), server_default='false', nullable=False))
    op.add_column('users', sa.Column('is_deleted', sa.Boolean(), server_default='false', nullable=False))
    op.add_column('users', sa.Column('deleted_at', sa.DateTime(timezone=True), nullable=True))
    op.add_column('users', sa.Column('is_shadow_banned', sa.Boolean(), server_default='false', nullable=False))
    op.add_column('users', sa.Column('plan_id', sa.Integer(), nullable=True))
    op.create_index(op.f('ix_users_is_deleted'), 'users', ['is_deleted'], unique=False)
    op.create_index(op.f('ix_users_is_shadow_banned'), 'users', ['is_shadow_banned'], unique=False)
    op.create_index(op.f('ix_users_last_active_at'), 'users', ['last_active_at'], unique=False)
    op.create_foreign_key(op.f('fk_users_plan_id_plans'), 'users', 'plans', ['plan_id'], ['id'])
    op.drop_column('users', 'plan')
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('users', sa.Column('plan', sa.VARCHAR(), server_default=sa.text("'BASE'::character varying"), autoincrement=False, nullable=False))
    op.drop_constraint(op.f('fk_users_plan_id_plans'), 'users', type_='foreignkey')
    op.drop_index(op.f('ix_users_last_active_at'), table_name='users')
    op.drop_index(op.f('ix_users_is_shadow_banned'), table_name='users')
    op.drop_index(op.f('ix_users_is_deleted'), table_name='users')
    op.drop_column('users', 'plan_id')
    op.drop_column('users', 'is_shadow_banned')
    op.drop_column('users', 'deleted_at')
    op.drop_column('users', 'is_deleted')
    op.drop_column('users', 'is_frozen')
    op.drop_column('users', 'last_active_at')
    op.drop_column('task_history', 'finished_at')
    op.drop_column('task_history', 'started_at')
    op.drop_constraint('_user_friend_year_uc', 'sent_congratulations', type_='unique')
    op.drop_constraint('_user_automation_uc', 'automations', type_='unique')
    op.drop_index(op.f('ix_plans_name_id'), table_name='plans')
    op.drop_table('plans')
    # ### end Alembic commands ###
