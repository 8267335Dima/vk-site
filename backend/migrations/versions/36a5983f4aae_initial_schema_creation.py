"""Initial schema creation

Revision ID: 36a5983f4aae
Revises: 
Create Date: 2025-09-19 23:36:50.017367

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '36a5983f4aae'
down_revision: Union[str, Sequence[str], None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('global_settings',
    sa.Column('key', sa.String(), nullable=False),
    sa.Column('value', sa.JSON(), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('is_enabled', sa.Boolean(), nullable=False),
    sa.PrimaryKeyConstraint('key', name=op.f('pk_global_settings'))
    )
    op.create_index(op.f('ix_global_settings_key'), 'global_settings', ['key'], unique=False)
    op.create_table('plans',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name_id', sa.String(), nullable=False),
    sa.Column('display_name', sa.String(), nullable=False),
    sa.Column('description', sa.Text(), nullable=False),
    sa.Column('base_price', sa.Float(), nullable=True),
    sa.Column('limits', sa.JSON(), nullable=False),
    sa.Column('available_features', sa.JSON(), nullable=False),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('is_popular', sa.Boolean(), nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_plans'))
    )
    op.create_index(op.f('ix_plans_name_id'), 'plans', ['name_id'], unique=True)
    op.create_table('banned_ips',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('ip_address', sa.String(), nullable=False),
    sa.Column('reason', sa.String(), nullable=True),
    sa.Column('banned_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('admin_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['admin_id'], ['users.id'], name=op.f('fk_banned_ips_admin_id_users')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_banned_ips'))
    )
    op.create_index(op.f('ix_banned_ips_ip_address'), 'banned_ips', ['ip_address'], unique=True)
    op.create_table('filter_presets',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('action_type', sa.String(), nullable=False),
    sa.Column('filters', sa.JSON(), nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name=op.f('fk_filter_presets_user_id_users'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_filter_presets')),
    sa.UniqueConstraint('user_id', 'name', 'action_type', name='_user_name_action_uc')
    )
    op.create_index(op.f('ix_filter_presets_action_type'), 'filter_presets', ['action_type'], unique=False)
    op.create_index(op.f('ix_filter_presets_user_id'), 'filter_presets', ['user_id'], unique=False)
    op.create_table('friend_request_logs',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('target_vk_id', sa.BigInteger(), nullable=False),
    sa.Column('status', sa.Enum('pending', 'accepted', name='friendrequeststatus', native_enum=False), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('resolved_at', sa.DateTime(timezone=True), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name=op.f('fk_friend_request_logs_user_id_users'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_friend_request_logs')),
    sa.UniqueConstraint('user_id', 'target_vk_id', name='_user_target_uc')
    )
    op.create_index(op.f('ix_friend_request_logs_created_at'), 'friend_request_logs', ['created_at'], unique=False)
    op.create_index(op.f('ix_friend_request_logs_status'), 'friend_request_logs', ['status'], unique=False)
    op.create_index(op.f('ix_friend_request_logs_target_vk_id'), 'friend_request_logs', ['target_vk_id'], unique=False)
    op.create_index(op.f('ix_friend_request_logs_user_id'), 'friend_request_logs', ['user_id'], unique=False)
    op.create_table('managed_profiles',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('manager_user_id', sa.Integer(), nullable=False),
    sa.Column('profile_user_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['manager_user_id'], ['users.id'], name=op.f('fk_managed_profiles_manager_user_id_users'), ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['profile_user_id'], ['users.id'], name=op.f('fk_managed_profiles_profile_user_id_users'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_managed_profiles')),
    sa.UniqueConstraint('manager_user_id', 'profile_user_id', name='_manager_profile_uc')
    )
    op.create_index(op.f('ix_managed_profiles_manager_user_id'), 'managed_profiles', ['manager_user_id'], unique=False)
    op.create_index(op.f('ix_managed_profiles_profile_user_id'), 'managed_profiles', ['profile_user_id'], unique=False)
    op.create_table('post_activity_heatmaps',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('heatmap_data', sa.JSON(), nullable=False),
    sa.Column('last_updated_at', sa.DateTime(timezone=True), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name=op.f('fk_post_activity_heatmaps_user_id_users'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_post_activity_heatmaps'))
    )
    op.create_index(op.f('ix_post_activity_heatmaps_user_id'), 'post_activity_heatmaps', ['user_id'], unique=True)
    op.create_table('scheduled_posts',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('vk_profile_id', sa.BigInteger(), nullable=False),
    sa.Column('post_text', sa.Text(), nullable=True),
    sa.Column('attachments', sa.JSON(), nullable=True),
    sa.Column('publish_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('status', sa.Enum('scheduled', 'published', 'failed', name='scheduledpoststatus', native_enum=False), nullable=False),
    sa.Column('arq_job_id', sa.String(), nullable=True),
    sa.Column('vk_post_id', sa.String(), nullable=True),
    sa.Column('error_message', sa.Text(), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name=op.f('fk_scheduled_posts_user_id_users'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_scheduled_posts')),
    sa.UniqueConstraint('arq_job_id', name=op.f('uq_scheduled_posts_arq_job_id'))
    )
    op.create_index(op.f('ix_scheduled_posts_publish_at'), 'scheduled_posts', ['publish_at'], unique=False)
    op.create_index(op.f('ix_scheduled_posts_status'), 'scheduled_posts', ['status'], unique=False)
    op.create_index(op.f('ix_scheduled_posts_user_id'), 'scheduled_posts', ['user_id'], unique=False)
    op.create_index(op.f('ix_scheduled_posts_vk_profile_id'), 'scheduled_posts', ['vk_profile_id'], unique=False)
    op.create_table('support_tickets',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('subject', sa.String(length=255), nullable=False),
    sa.Column('status', sa.Enum('OPEN', 'IN_PROGRESS', 'RESOLVED', 'CLOSED', name='ticketstatus', native_enum=False), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('reopen_count', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name=op.f('fk_support_tickets_user_id_users'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_support_tickets'))
    )
    op.create_index(op.f('ix_support_tickets_status'), 'support_tickets', ['status'], unique=False)
    op.create_index(op.f('ix_support_tickets_user_id'), 'support_tickets', ['user_id'], unique=False)
    op.create_table('teams',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('owner_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['owner_id'], ['users.id'], name=op.f('fk_teams_owner_id_users'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_teams')),
    sa.UniqueConstraint('owner_id', name=op.f('uq_teams_owner_id'))
    )
    op.create_table('team_members',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('team_id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('role', sa.Enum('admin', 'member', name='teammemberrole', native_enum=False), nullable=False),
    sa.ForeignKeyConstraint(['team_id'], ['teams.id'], name=op.f('fk_team_members_team_id_teams'), ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name=op.f('fk_team_members_user_id_users'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_team_members')),
    sa.UniqueConstraint('team_id', 'user_id', name='_team_user_uc'),
    sa.UniqueConstraint('user_id', name=op.f('uq_team_members_user_id'))
    )
    op.create_table('ticket_messages',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('ticket_id', sa.Integer(), nullable=False),
    sa.Column('author_id', sa.Integer(), nullable=False),
    sa.Column('message', sa.Text(), nullable=False),
    sa.Column('attachment_url', sa.String(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=True),
    sa.ForeignKeyConstraint(['author_id'], ['users.id'], name=op.f('fk_ticket_messages_author_id_users')),
    sa.ForeignKeyConstraint(['ticket_id'], ['support_tickets.id'], name=op.f('fk_ticket_messages_ticket_id_support_tickets'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_ticket_messages'))
    )
    op.create_index(op.f('ix_ticket_messages_ticket_id'), 'ticket_messages', ['ticket_id'], unique=False)
    op.create_table('team_profile_access',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('team_member_id', sa.Integer(), nullable=False),
    sa.Column('profile_user_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['profile_user_id'], ['users.id'], name=op.f('fk_team_profile_access_profile_user_id_users'), ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['team_member_id'], ['team_members.id'], name=op.f('fk_team_profile_access_team_member_id_team_members'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_team_profile_access')),
    sa.UniqueConstraint('team_member_id', 'profile_user_id', name='_team_member_profile_uc')
    )
    op.alter_column('action_logs', 'timestamp',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               existing_nullable=True)
    op.alter_column('automations', 'last_run_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               existing_nullable=True)
    op.add_column('daily_stats', sa.Column('posts_created_count', sa.Integer(), server_default=sa.text('0'), nullable=False))
    op.add_column('daily_stats', sa.Column('groups_joined_count', sa.Integer(), server_default=sa.text('0'), nullable=False))
    op.add_column('daily_stats', sa.Column('groups_left_count', sa.Integer(), server_default=sa.text('0'), nullable=False))
    op.drop_column('daily_stats', 'like_friends_feed_count')
    op.alter_column('login_history', 'timestamp',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               existing_nullable=True)
    op.alter_column('notifications', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               existing_nullable=True)
    op.drop_constraint(op.f('notifications_user_id_fkey'), 'notifications', type_='foreignkey')
    op.create_foreign_key(op.f('fk_notifications_user_id_users'), 'notifications', 'users', ['user_id'], ['id'], ondelete='CASCADE')
    op.add_column('payments', sa.Column('error_message', sa.Text(), nullable=True))
    op.alter_column('payments', 'user_id',
               existing_type=sa.INTEGER(),
               nullable=True)
    op.alter_column('payments', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               existing_nullable=True)
    op.alter_column('payments', 'updated_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               existing_nullable=True)
    op.drop_constraint(op.f('payments_user_id_fkey'), 'payments', type_='foreignkey')
    op.create_foreign_key(op.f('fk_payments_user_id_users'), 'payments', 'users', ['user_id'], ['id'], ondelete='SET NULL')
    op.add_column('profile_metrics', sa.Column('followers_count', sa.Integer(), nullable=False))
    op.add_column('profile_metrics', sa.Column('photos_count', sa.Integer(), nullable=False))
    op.add_column('profile_metrics', sa.Column('wall_posts_count', sa.Integer(), nullable=False))
    op.add_column('profile_metrics', sa.Column('recent_post_likes', sa.Integer(), nullable=False))
    op.add_column('profile_metrics', sa.Column('recent_photo_likes', sa.Integer(), nullable=False))
    op.add_column('profile_metrics', sa.Column('total_post_likes', sa.Integer(), nullable=False))
    op.add_column('profile_metrics', sa.Column('total_photo_likes', sa.Integer(), nullable=False))
    op.drop_column('profile_metrics', 'total_likes_on_content')
    op.alter_column('proxies', 'last_checked_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               existing_nullable=True)
    op.add_column('scenario_steps', sa.Column('step_type', sa.Enum('action', 'condition', name='scenariosteptype', native_enum=False), nullable=False))
    op.add_column('scenario_steps', sa.Column('details', sa.JSON(), nullable=False))
    op.add_column('scenario_steps', sa.Column('next_step_id', sa.Integer(), nullable=True))
    op.add_column('scenario_steps', sa.Column('on_success_next_step_id', sa.Integer(), nullable=True))
    op.add_column('scenario_steps', sa.Column('on_failure_next_step_id', sa.Integer(), nullable=True))
    op.add_column('scenario_steps', sa.Column('position_x', sa.Float(), nullable=True))
    op.add_column('scenario_steps', sa.Column('position_y', sa.Float(), nullable=True))
    op.drop_constraint(op.f('scenario_steps_scenario_id_fkey'), 'scenario_steps', type_='foreignkey')
    op.create_foreign_key(op.f('fk_scenario_steps_on_success_next_step_id_scenario_steps'), 'scenario_steps', 'scenario_steps', ['on_success_next_step_id'], ['id'], ondelete='SET NULL')
    op.create_foreign_key(op.f('fk_scenario_steps_on_failure_next_step_id_scenario_steps'), 'scenario_steps', 'scenario_steps', ['on_failure_next_step_id'], ['id'], ondelete='SET NULL')
    op.create_foreign_key(op.f('fk_scenario_steps_next_step_id_scenario_steps'), 'scenario_steps', 'scenario_steps', ['next_step_id'], ['id'], ondelete='SET NULL')
    op.create_foreign_key(op.f('fk_scenario_steps_scenario_id_scenarios'), 'scenario_steps', 'scenarios', ['scenario_id'], ['id'], ondelete='CASCADE')
    op.drop_column('scenario_steps', 'settings')
    op.drop_column('scenario_steps', 'action_type')
    op.drop_column('scenario_steps', 'step_order')
    op.add_column('scenarios', sa.Column('first_step_id', sa.Integer(), nullable=True))
    op.drop_constraint(op.f('scenarios_user_id_fkey'), 'scenarios', type_='foreignkey')
    op.create_foreign_key('fk_scenarios_first_step_id_scenario_steps', 'scenarios', 'scenario_steps', ['first_step_id'], ['id'], ondelete='SET NULL', use_alter=True)
    op.create_foreign_key(op.f('fk_scenarios_user_id_users'), 'scenarios', 'users', ['user_id'], ['id'], ondelete='CASCADE')
    op.add_column('task_history', sa.Column('arq_job_id', sa.String(), nullable=True))
    op.add_column('task_history', sa.Column('started_at', sa.DateTime(timezone=True), nullable=True))
    op.add_column('task_history', sa.Column('finished_at', sa.DateTime(timezone=True), nullable=True))
    op.alter_column('task_history', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               existing_nullable=True)
    op.alter_column('task_history', 'updated_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               existing_nullable=True)
    op.drop_index(op.f('ix_task_history_celery_task_id'), table_name='task_history')
    op.create_index(op.f('ix_task_history_arq_job_id'), 'task_history', ['arq_job_id'], unique=True)
    op.drop_column('task_history', 'celery_task_id')
    op.add_column('users', sa.Column('last_active_at', sa.DateTime(timezone=True), nullable=True))
    op.add_column('users', sa.Column('is_frozen', sa.Boolean(), server_default='false', nullable=False))
    op.add_column('users', sa.Column('is_deleted', sa.Boolean(), server_default='false', nullable=False))
    op.add_column('users', sa.Column('deleted_at', sa.DateTime(timezone=True), nullable=True))
    op.add_column('users', sa.Column('is_shadow_banned', sa.Boolean(), server_default='false', nullable=False))
    op.add_column('users', sa.Column('plan_id', sa.Integer(), nullable=True))
    op.add_column('users', sa.Column('daily_message_limit', sa.Integer(), server_default=sa.text('0'), nullable=False))
    op.add_column('users', sa.Column('daily_posts_limit', sa.Integer(), server_default=sa.text('0'), nullable=False))
    op.add_column('users', sa.Column('daily_join_groups_limit', sa.Integer(), server_default=sa.text('0'), nullable=False))
    op.add_column('users', sa.Column('daily_leave_groups_limit', sa.Integer(), server_default=sa.text('0'), nullable=False))
    op.add_column('users', sa.Column('analytics_settings_posts_count', sa.Integer(), server_default=sa.text('100'), nullable=False))
    op.add_column('users', sa.Column('analytics_settings_photos_count', sa.Integer(), server_default=sa.text('200'), nullable=False))
    op.alter_column('users', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               existing_nullable=True)
    op.alter_column('users', 'plan_expires_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               existing_nullable=True)
    op.alter_column('users', 'delay_profile',
               existing_type=postgresql.ENUM('slow', 'normal', 'fast', name='delayprofile'),
               type_=sa.Enum('slow', 'normal', 'fast', name='delayprofile', native_enum=False),
               existing_nullable=False,
               existing_server_default=sa.text("'normal'::delayprofile"))
    op.create_index(op.f('ix_users_is_deleted'), 'users', ['is_deleted'], unique=False)
    op.create_index(op.f('ix_users_is_shadow_banned'), 'users', ['is_shadow_banned'], unique=False)
    op.create_index(op.f('ix_users_last_active_at'), 'users', ['last_active_at'], unique=False)
    op.create_foreign_key(op.f('fk_users_plan_id_plans'), 'users', 'plans', ['plan_id'], ['id'])
    op.drop_column('users', 'plan')
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('users', sa.Column('plan', sa.VARCHAR(), server_default=sa.text("'Базовый'::character varying"), autoincrement=False, nullable=False))
    op.drop_constraint(op.f('fk_users_plan_id_plans'), 'users', type_='foreignkey')
    op.drop_index(op.f('ix_users_last_active_at'), table_name='users')
    op.drop_index(op.f('ix_users_is_shadow_banned'), table_name='users')
    op.drop_index(op.f('ix_users_is_deleted'), table_name='users')
    op.alter_column('users', 'delay_profile',
               existing_type=sa.Enum('slow', 'normal', 'fast', name='delayprofile', native_enum=False),
               type_=postgresql.ENUM('slow', 'normal', 'fast', name='delayprofile'),
               existing_nullable=False,
               existing_server_default=sa.text("'normal'::delayprofile"))
    op.alter_column('users', 'plan_expires_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               existing_nullable=True)
    op.alter_column('users', 'created_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               existing_nullable=True)
    op.drop_column('users', 'analytics_settings_photos_count')
    op.drop_column('users', 'analytics_settings_posts_count')
    op.drop_column('users', 'daily_leave_groups_limit')
    op.drop_column('users', 'daily_join_groups_limit')
    op.drop_column('users', 'daily_posts_limit')
    op.drop_column('users', 'daily_message_limit')
    op.drop_column('users', 'plan_id')
    op.drop_column('users', 'is_shadow_banned')
    op.drop_column('users', 'deleted_at')
    op.drop_column('users', 'is_deleted')
    op.drop_column('users', 'is_frozen')
    op.drop_column('users', 'last_active_at')
    op.add_column('task_history', sa.Column('celery_task_id', sa.VARCHAR(), autoincrement=False, nullable=True))
    op.drop_index(op.f('ix_task_history_arq_job_id'), table_name='task_history')
    op.create_index(op.f('ix_task_history_celery_task_id'), 'task_history', ['celery_task_id'], unique=True)
    op.alter_column('task_history', 'updated_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               existing_nullable=True)
    op.alter_column('task_history', 'created_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               existing_nullable=True)
    op.drop_column('task_history', 'finished_at')
    op.drop_column('task_history', 'started_at')
    op.drop_column('task_history', 'arq_job_id')
    op.drop_constraint(op.f('fk_scenarios_user_id_users'), 'scenarios', type_='foreignkey')
    op.drop_constraint('fk_scenarios_first_step_id_scenario_steps', 'scenarios', type_='foreignkey')
    op.create_foreign_key(op.f('scenarios_user_id_fkey'), 'scenarios', 'users', ['user_id'], ['id'])
    op.drop_column('scenarios', 'first_step_id')
    op.add_column('scenario_steps', sa.Column('step_order', sa.INTEGER(), autoincrement=False, nullable=False))
    op.add_column('scenario_steps', sa.Column('action_type', sa.VARCHAR(), autoincrement=False, nullable=False))
    op.add_column('scenario_steps', sa.Column('settings', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=False))
    op.drop_constraint(op.f('fk_scenario_steps_scenario_id_scenarios'), 'scenario_steps', type_='foreignkey')
    op.drop_constraint(op.f('fk_scenario_steps_next_step_id_scenario_steps'), 'scenario_steps', type_='foreignkey')
    op.drop_constraint(op.f('fk_scenario_steps_on_failure_next_step_id_scenario_steps'), 'scenario_steps', type_='foreignkey')
    op.drop_constraint(op.f('fk_scenario_steps_on_success_next_step_id_scenario_steps'), 'scenario_steps', type_='foreignkey')
    op.create_foreign_key(op.f('scenario_steps_scenario_id_fkey'), 'scenario_steps', 'scenarios', ['scenario_id'], ['id'])
    op.drop_column('scenario_steps', 'position_y')
    op.drop_column('scenario_steps', 'position_x')
    op.drop_column('scenario_steps', 'on_failure_next_step_id')
    op.drop_column('scenario_steps', 'on_success_next_step_id')
    op.drop_column('scenario_steps', 'next_step_id')
    op.drop_column('scenario_steps', 'details')
    op.drop_column('scenario_steps', 'step_type')
    op.alter_column('proxies', 'last_checked_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               existing_nullable=True)
    op.add_column('profile_metrics', sa.Column('total_likes_on_content', sa.INTEGER(), autoincrement=False, nullable=False))
    op.drop_column('profile_metrics', 'total_photo_likes')
    op.drop_column('profile_metrics', 'total_post_likes')
    op.drop_column('profile_metrics', 'recent_photo_likes')
    op.drop_column('profile_metrics', 'recent_post_likes')
    op.drop_column('profile_metrics', 'wall_posts_count')
    op.drop_column('profile_metrics', 'photos_count')
    op.drop_column('profile_metrics', 'followers_count')
    op.drop_constraint(op.f('fk_payments_user_id_users'), 'payments', type_='foreignkey')
    op.create_foreign_key(op.f('payments_user_id_fkey'), 'payments', 'users', ['user_id'], ['id'])
    op.alter_column('payments', 'updated_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               existing_nullable=True)
    op.alter_column('payments', 'created_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               existing_nullable=True)
    op.alter_column('payments', 'user_id',
               existing_type=sa.INTEGER(),
               nullable=False)
    op.drop_column('payments', 'error_message')
    op.drop_constraint(op.f('fk_notifications_user_id_users'), 'notifications', type_='foreignkey')
    op.create_foreign_key(op.f('notifications_user_id_fkey'), 'notifications', 'users', ['user_id'], ['id'])
    op.alter_column('notifications', 'created_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               existing_nullable=True)
    op.alter_column('login_history', 'timestamp',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               existing_nullable=True)
    op.add_column('daily_stats', sa.Column('like_friends_feed_count', sa.INTEGER(), autoincrement=False, nullable=False))
    op.drop_column('daily_stats', 'groups_left_count')
    op.drop_column('daily_stats', 'groups_joined_count')
    op.drop_column('daily_stats', 'posts_created_count')
    op.alter_column('automations', 'last_run_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               existing_nullable=True)
    op.alter_column('action_logs', 'timestamp',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               existing_nullable=True)
    op.drop_table('team_profile_access')
    op.drop_index(op.f('ix_ticket_messages_ticket_id'), table_name='ticket_messages')
    op.drop_table('ticket_messages')
    op.drop_table('team_members')
    op.drop_table('teams')
    op.drop_index(op.f('ix_support_tickets_user_id'), table_name='support_tickets')
    op.drop_index(op.f('ix_support_tickets_status'), table_name='support_tickets')
    op.drop_table('support_tickets')
    op.drop_index(op.f('ix_scheduled_posts_vk_profile_id'), table_name='scheduled_posts')
    op.drop_index(op.f('ix_scheduled_posts_user_id'), table_name='scheduled_posts')
    op.drop_index(op.f('ix_scheduled_posts_status'), table_name='scheduled_posts')
    op.drop_index(op.f('ix_scheduled_posts_publish_at'), table_name='scheduled_posts')
    op.drop_table('scheduled_posts')
    op.drop_index(op.f('ix_post_activity_heatmaps_user_id'), table_name='post_activity_heatmaps')
    op.drop_table('post_activity_heatmaps')
    op.drop_index(op.f('ix_managed_profiles_profile_user_id'), table_name='managed_profiles')
    op.drop_index(op.f('ix_managed_profiles_manager_user_id'), table_name='managed_profiles')
    op.drop_table('managed_profiles')
    op.drop_index(op.f('ix_friend_request_logs_user_id'), table_name='friend_request_logs')
    op.drop_index(op.f('ix_friend_request_logs_target_vk_id'), table_name='friend_request_logs')
    op.drop_index(op.f('ix_friend_request_logs_status'), table_name='friend_request_logs')
    op.drop_index(op.f('ix_friend_request_logs_created_at'), table_name='friend_request_logs')
    op.drop_table('friend_request_logs')
    op.drop_index(op.f('ix_filter_presets_user_id'), table_name='filter_presets')
    op.drop_index(op.f('ix_filter_presets_action_type'), table_name='filter_presets')
    op.drop_table('filter_presets')
    op.drop_index(op.f('ix_banned_ips_ip_address'), table_name='banned_ips')
    op.drop_table('banned_ips')
    op.drop_index(op.f('ix_plans_name_id'), table_name='plans')
    op.drop_table('plans')
    op.drop_index(op.f('ix_global_settings_key'), table_name='global_settings')
    op.drop_table('global_settings')
    # ### end Alembic commands ###
