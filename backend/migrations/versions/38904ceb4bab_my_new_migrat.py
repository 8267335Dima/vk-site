# В файле migrations/versions/38904ceb4bab_my_new_migrat.py

from typing import Sequence, Union
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql # <-- Убедитесь, что этот импорт есть

# revision identifiers, used by Alembic.
revision: str = '38904ceb4bab'
down_revision: Union[str, None] = 'fedab3dc4587'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None

# --- ЭТА ЧАСТЬ ОСТАЕТСЯ БЕЗ ИЗМЕНЕНИЙ ---
scenariosteptype_enum = sa.Enum('action', 'condition', name='scenariosteptype')
friendrequeststatus_enum = sa.Enum('pending', 'accepted', name='friendrequeststatus')
scheduledpoststatus_enum = sa.Enum('scheduled', 'published', 'failed', name='scheduledpoststatus')
teammemberrole_enum = sa.Enum('admin', 'member', name='teammemberrole')


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###

    # --- ШАГ 1: Явно создаем все типы с проверкой. Это правильно и это оставляем. ---
    scenariosteptype_enum.create(op.get_bind(), checkfirst=True)
    friendrequeststatus_enum.create(op.get_bind(), checkfirst=True)
    scheduledpoststatus_enum.create(op.get_bind(), checkfirst=True)
    teammemberrole_enum.create(op.get_bind(), checkfirst=True)

    # --- ШАГ 2: Создаем таблицы, но теперь используем postgresql.ENUM с create_type=False ---
    # Это говорит Alembic: "Не пытайся создать тип, просто используй его по имени".

    op.create_table('filter_presets',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('action_type', sa.String(), nullable=False),
    sa.Column('filters', sa.JSON(), nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('user_id', 'name', 'action_type', name='_user_name_action_uc')
    )
    op.create_index(op.f('ix_filter_presets_action_type'), 'filter_presets', ['action_type'], unique=False)
    op.create_index(op.f('ix_filter_presets_user_id'), 'filter_presets', ['user_id'], unique=False)

    op.create_table('friend_request_logs',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('target_vk_id', sa.BigInteger(), nullable=False),
    # ИЗМЕНЕНИЕ ЗДЕСЬ:
    sa.Column('status', postgresql.ENUM('pending', 'accepted', name='friendrequeststatus', create_type=False), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('resolved_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('user_id', 'target_vk_id', name='_user_target_uc')
    )
    op.create_index(op.f('ix_friend_request_logs_created_at'), 'friend_request_logs', ['created_at'], unique=False)
    op.create_index(op.f('ix_friend_request_logs_status'), 'friend_request_logs', ['status'], unique=False)
    op.create_index(op.f('ix_friend_request_logs_target_vk_id'), 'friend_request_logs', ['target_vk_id'], unique=False)
    op.create_index(op.f('ix_friend_request_logs_user_id'), 'friend_request_logs', ['user_id'], unique=False)

    op.create_table('managed_profiles',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('manager_user_id', sa.Integer(), nullable=False),
    sa.Column('profile_user_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['manager_user_id'], ['users.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['profile_user_id'], ['users.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('manager_user_id', 'profile_user_id', name='_manager_profile_uc')
    )
    op.create_index(op.f('ix_managed_profiles_manager_user_id'), 'managed_profiles', ['manager_user_id'], unique=False)
    op.create_index(op.f('ix_managed_profiles_profile_user_id'), 'managed_profiles', ['profile_user_id'], unique=False)

    op.create_table('post_activity_heatmaps',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('heatmap_data', sa.JSON(), nullable=False),
    sa.Column('last_updated_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_post_activity_heatmaps_user_id'), 'post_activity_heatmaps', ['user_id'], unique=True)

    op.create_table('scheduled_posts',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('vk_profile_id', sa.BigInteger(), nullable=False),
    sa.Column('post_text', sa.Text(), nullable=True),
    sa.Column('attachments', sa.JSON(), nullable=True),
    sa.Column('publish_at', sa.DateTime(), nullable=False),
    # ИЗМЕНЕНИЕ ЗДЕСЬ:
    sa.Column('status', postgresql.ENUM('scheduled', 'published', 'failed', name='scheduledpoststatus', create_type=False), nullable=False),
    sa.Column('celery_task_id', sa.String(), nullable=True),
    sa.Column('vk_post_id', sa.String(), nullable=True),
    sa.Column('error_message', sa.Text(), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('celery_task_id')
    )
    op.create_index(op.f('ix_scheduled_posts_publish_at'), 'scheduled_posts', ['publish_at'], unique=False)
    op.create_index(op.f('ix_scheduled_posts_status'), 'scheduled_posts', ['status'], unique=False)
    op.create_index(op.f('ix_scheduled_posts_user_id'), 'scheduled_posts', ['user_id'], unique=False)
    op.create_index(op.f('ix_scheduled_posts_vk_profile_id'), 'scheduled_posts', ['vk_profile_id'], unique=False)

    op.create_table('teams',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('owner_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['owner_id'], ['users.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('owner_id')
    )

    op.create_table('team_members',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('team_id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    # ИЗМЕНЕНИЕ ЗДЕСЬ:
    sa.Column('role', postgresql.ENUM('admin', 'member', name='teammemberrole', create_type=False), nullable=False),
    sa.ForeignKeyConstraint(['team_id'], ['teams.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('team_id', 'user_id', name='_team_user_uc'),
    sa.UniqueConstraint('user_id')
    )

    op.create_table('team_profile_access',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('team_member_id', sa.Integer(), nullable=False),
    sa.Column('profile_user_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['profile_user_id'], ['users.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['team_member_id'], ['team_members.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )

    op.drop_table('celery_periodictask')
    op.drop_table('celery_solarschedule')
    op.drop_table('celery_periodictaskchanged')
    op.drop_table('celery_crontabschedule')
    op.drop_table('celery_clockedschedule')
    op.drop_table('celery_intervalschedule')

    # ИЗМЕНЕНИЕ ЗДЕСЬ:
    op.add_column('scenario_steps', sa.Column('step_type', postgresql.ENUM('action', 'condition', name='scenariosteptype', create_type=False), nullable=True))
    op.execute("UPDATE scenario_steps SET step_type = 'action' WHERE step_type IS NULL")
    op.alter_column('scenario_steps', 'step_type', nullable=False)

    op.add_column('scenario_steps', sa.Column('details', sa.JSON(), nullable=True))
    op.execute("UPDATE scenario_steps SET details = '{}'::json WHERE details IS NULL")
    op.alter_column('scenario_steps', 'details', nullable=False)

    op.add_column('scenario_steps', sa.Column('next_step_id', sa.Integer(), nullable=True))
    op.add_column('scenario_steps', sa.Column('on_success_next_step_id', sa.Integer(), nullable=True))
    op.add_column('scenario_steps', sa.Column('on_failure_next_step_id', sa.Integer(), nullable=True))

    op.add_column('scenario_steps', sa.Column('position_x', sa.Float(), nullable=True))
    op.add_column('scenario_steps', sa.Column('position_y', sa.Float(), nullable=True))
    op.execute("UPDATE scenario_steps SET position_x = 0 WHERE position_x IS NULL")
    op.execute("UPDATE scenario_steps SET position_y = 0 WHERE position_y IS NULL")

    op.create_foreign_key(None, 'scenario_steps', 'scenario_steps', ['on_success_next_step_id'], ['id'])
    op.create_foreign_key(None, 'scenario_steps', 'scenario_steps', ['on_failure_next_step_id'], ['id'])
    op.create_foreign_key(None, 'scenario_steps', 'scenario_steps', ['next_step_id'], ['id'])
    op.drop_column('scenario_steps', 'step_order')
    op.drop_column('scenario_steps', 'action_type')
    op.drop_column('scenario_steps', 'settings')
    op.drop_column('scenario_steps', 'batch_settings')
    op.add_column('scenarios', sa.Column('first_step_id', sa.Integer(), nullable=True))
    op.create_foreign_key('fk_scenario_first_step', 'scenarios', 'scenario_steps', ['first_step_id'], ['id'], use_alter=True)
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_constraint('fk_scenario_first_step', 'scenarios', type_='foreignkey')
    op.drop_column('scenarios', 'first_step_id')
    op.add_column('scenario_steps', sa.Column('batch_settings', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True))
    op.add_column('scenario_steps', sa.Column('settings', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=False))
    op.add_column('scenario_steps', sa.Column('action_type', sa.VARCHAR(), autoincrement=False, nullable=False))
    op.add_column('scenario_steps', sa.Column('step_order', sa.INTEGER(), autoincrement=False, nullable=False))
    op.drop_constraint(None, 'scenario_steps', type_='foreignkey')
    op.drop_constraint(None, 'scenario_steps', type_='foreignkey')
    op.drop_constraint(None, 'scenario_steps', type_='foreignkey')
    op.drop_column('scenario_steps', 'position_y')
    op.drop_column('scenario_steps', 'position_x')
    op.drop_column('scenario_steps', 'on_failure_next_step_id')
    op.drop_column('scenario_steps', 'on_success_next_step_id')
    op.drop_column('scenario_steps', 'next_step_id')
    op.drop_column('scenario_steps', 'details')
    op.drop_column('scenario_steps', 'step_type')
    op.create_table('celery_intervalschedule',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('every', sa.INTEGER(), autoincrement=False, nullable=False, comment='Number of interval periods to wait before running the task again'),
    sa.Column('period', postgresql.ENUM('days', 'hours', 'minutes', 'seconds', 'microseconds', name='period'), autoincrement=False, nullable=False, comment='The type of period between task runs (Example: days)'),
    sa.CheckConstraint('every >= 1', name=op.f('celery_intervalschedule_every_check')),
    sa.PrimaryKeyConstraint('id', name=op.f('celery_intervalschedule_pkey'))
    )
    op.create_table('celery_clockedschedule',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('clocked_time', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('celery_clockedschedule_pkey'))
    )
    op.create_table('celery_crontabschedule',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('minute', sa.VARCHAR(length=240), autoincrement=False, nullable=False, comment='Cron Minutes to Run. Use "*" for "all". (Example: "0,30")'),
    sa.Column('hour', sa.VARCHAR(length=96), autoincrement=False, nullable=False, comment='Cron Hours to Run. Use "*" for "all". (Example: "8,20")'),
    sa.Column('day_of_week', sa.VARCHAR(length=64), autoincrement=False, nullable=False, comment='Cron Days Of The Week to Run. Use "*" for "all", Sunday is 0 or 7, Monday is 1. (Example: "0,5")'),
    sa.Column('day_of_month', sa.VARCHAR(length=124), autoincrement=False, nullable=False, comment='Cron Days Of The Month to Run. Use "*" for "all". (Example: "1,15")'),
    sa.Column('month_of_year', sa.VARCHAR(length=64), autoincrement=False, nullable=False, comment='Cron Months (1-12) Of The Year to Run. Use "*" for "all". (Example: "1,12")'),
    sa.Column('timezone', sa.VARCHAR(length=64), autoincrement=False, nullable=False, comment='Timezone to Run the Cron Schedule on. Default is UTC.'),
    sa.PrimaryKeyConstraint('id', name=op.f('celery_crontabschedule_pkey'))
    )
    op.create_table('celery_periodictaskchanged',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('last_update', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name=op.f('celery_periodictaskchanged_pkey'))
    )
    op.create_table('celery_solarschedule',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('event', postgresql.ENUM('dawn_astronomical', 'dawn_nautical', 'dawn_civil', 'sunrise', 'solar_noon', 'sunset', 'dusk_civil', 'dusk_nautical', 'dusk_astronomical', name='solarevent'), autoincrement=False, nullable=False, comment='The type of solar event when the job should run'),
    sa.Column('latitude', sa.NUMERIC(precision=9, scale=6), autoincrement=False, nullable=False, comment='Run the task when the event happens at this latitude'),
    sa.Column('longitude', sa.NUMERIC(precision=9, scale=6), autoincrement=False, nullable=False, comment='Run the task when the event happens at this longitude'),
    sa.CheckConstraint("latitude >= '-90'::integer::numeric AND latitude <= 90::numeric", name=op.f('celery_solarschedule_latitude_check')),
    sa.CheckConstraint("longitude >= '-180'::integer::numeric AND longitude <= 180::numeric", name=op.f('celery_solarschedule_longitude_check')),
    sa.PrimaryKeyConstraint('id', name=op.f('celery_solarschedule_pkey')),
    sa.UniqueConstraint('event', 'latitude', 'longitude', name=op.f('celery_solarschedule_event_latitude_longitude_key'), postgresql_include=[], postgresql_nulls_not_distinct=False)
    )
    op.create_table('celery_periodictask',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(length=255), autoincrement=False, nullable=False, comment='Short Description For This Task'),
    sa.Column('task', sa.VARCHAR(length=255), autoincrement=False, nullable=False, comment='The Name of the Celery Task that Should be Run.  (Example: "proj.tasks.import_contacts")'),
    sa.Column('args', sa.TEXT(), autoincrement=False, nullable=False, comment='JSON encoded positional arguments (Example: ["arg1", "arg2"])'),
    sa.Column('kwargs', sa.TEXT(), autoincrement=False, nullable=False, comment='JSON encoded keyword arguments (Example: {"argument": "value"})'),
    sa.Column('queue', sa.VARCHAR(length=255), autoincrement=False, nullable=True, comment='Queue defined in CELERY_TASK_QUEUES. Leave None for default queuing.'),
    sa.Column('exchange', sa.VARCHAR(length=255), autoincrement=False, nullable=True, comment='Override Exchange for low-level AMQP routing'),
    sa.Column('routing_key', sa.VARCHAR(length=255), autoincrement=False, nullable=True, comment='Override Routing Key for low-level AMQP routing'),
    sa.Column('headers', sa.TEXT(), autoincrement=False, nullable=True, comment='JSON encoded message headers for the AMQP message.'),
    sa.Column('priority', sa.INTEGER(), autoincrement=False, nullable=True, comment='Priority Number between 0 and 255. Supported by: RabbitMQ, Redis (priority reversed, 0 is highest).'),
    sa.Column('expires', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True, comment='Datetime after which the schedule will no longer trigger the task to run'),
    sa.Column('expire_seconds', sa.INTEGER(), autoincrement=False, nullable=True, comment='Timedelta with seconds which the schedule will no longer trigger the task to run'),
    sa.Column('one_off', sa.BOOLEAN(), autoincrement=False, nullable=False, comment='If True, the schedule will only run the task a single time'),
    sa.Column('start_time', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True, comment='Datetime when the schedule should begin triggering the task to run'),
    sa.Column('enabled', sa.BOOLEAN(), autoincrement=False, nullable=False, comment='Set to False to disable the schedule'),
    sa.Column('last_run_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True, comment='Datetime that the schedule last triggered the task to run. '),
    sa.Column('total_run_count', sa.INTEGER(), autoincrement=False, nullable=False, comment='Running count of how many times the schedule has triggered the task'),
    sa.Column('date_changed', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True, comment='Datetime that this PeriodicTask was last modified'),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True, comment='Detailed description about the details of this Periodic Task'),
    sa.Column('discriminator', sa.VARCHAR(length=20), autoincrement=False, nullable=False, comment='Lower case name of the schedule class. '),
    sa.Column('schedule_id', sa.INTEGER(), autoincrement=False, nullable=False, comment='ID of the schedule model object. '),
    sa.CheckConstraint('priority >= 0 AND priority <= 255', name=op.f('celery_periodictask_priority_check')),
    sa.PrimaryKeyConstraint('id', name=op.f('celery_periodictask_pkey')),
    sa.UniqueConstraint('name', name=op.f('celery_periodictask_name_key'), postgresql_include=[], postgresql_nulls_not_distinct=False)
    )
    op.drop_table('team_profile_access')
    op.drop_table('team_members')
    op.drop_table('teams')
    op.drop_index(op.f('ix_scheduled_posts_vk_profile_id'), table_name='scheduled_posts')
    op.drop_index(op.f('ix_scheduled_posts_user_id'), table_name='scheduled_posts')
    op.drop_index(op.f('ix_scheduled_posts_status'), table_name='scheduled_posts')
    op.drop_index(op.f('ix_scheduled_posts_publish_at'), table_name='scheduled_posts')
    op.drop_table('scheduled_posts')
    op.drop_index(op.f('ix_post_activity_heatmaps_user_id'), table_name='post_activity_heatmaps')
    op.drop_table('post_activity_heatmaps')
    op.drop_index(op.f('ix_managed_profiles_profile_user_id'), table_name='managed_profiles')
    op.drop_index(op.f('ix_managed_profiles_manager_user_id'), table_name='managed_profiles')
    op.drop_table('managed_profiles')
    op.drop_index(op.f('ix_friend_request_logs_user_id'), table_name='friend_request_logs')
    op.drop_index(op.f('ix_friend_request_logs_target_vk_id'), table_name='friend_request_logs')
    op.drop_index(op.f('ix_friend_request_logs_status'), table_name='friend_request_logs')
    op.drop_index(op.f('ix_friend_request_logs_created_at'), table_name='friend_request_logs')
    op.drop_table('friend_request_logs')
    op.drop_index(op.f('ix_filter_presets_user_id'), table_name='filter_presets')
    op.drop_index(op.f('ix_filter_presets_action_type'), table_name='filter_presets')
    op.drop_table('filter_presets')
    
    # Удаляем все ENUM типы с проверкой на существование
    teammemberrole_enum.drop(op.get_bind(), checkfirst=True)
    scheduledpoststatus_enum.drop(op.get_bind(), checkfirst=True)
    friendrequeststatus_enum.drop(op.get_bind(), checkfirst=True)
    scenariosteptype_enum.drop(op.get_bind(), checkfirst=True)
    
    # ### end Alembic commands ###