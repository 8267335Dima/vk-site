Запустите сервер для разработки: npm start
Откройте в браузере http://localhost:3000

docker-compose down
docker-compose build --no-cache
docker-compose up -d


запуск сразу:
# Выполнять в терминале в папке frontend
npm run dev
npm start
npm run dev
docker exec -it social_pilot_postgres_prod psql -U smm_user -d smm_combine
\dt

тесты: docker-compose exec backend pytest
После внесения изменений выполните docker-compose up -d --force-recreate, чтобы пересоздать контейнеры с новыми сетевыми настройками


Ваш новый рабочий процесс
Теперь все управление проектом происходит из папки frontend.
Первый раз / Применение миграций:
Откройте терминал в frontend/.
npm run services:up (запустит Postgres и Redis)
npm run db:upgrade (создаст таблицы в базе)
Ежедневная разработка:
Откройте терминал в frontend/.
npm run services:up (если сервисы еще не запущены)
npm run dev (запустит весь ваш код)


Выполните npm run services:down, чтобы остановить Postgres и Redis.

cd frontend && yarn dev

cd backend && alembic revision --autogenerate -m "add timezone" && alembic upgrade head


тесты: 

cd backend && poetry run pytest -v -s tests/test_auth.py — Проверка логина и переключения профилей.
cd backend && poetry run pytest -v -s tests/test_user_endpoints.py — Проверка эндпоинтов профиля, лимитов, скорости и пресетов.
cd backend && poetry run pytest -v -s tests/test_content_tasks.py — Тесты лайков, сторис и пакетного планирования постов.
cd backend && poetry run pytest -v -s tests/test_friend_tasks.py — Тесты добавления, удаления друзей и отправки сообщений при добавлении.
cd backend && poetry run pytest -v -s tests/test_group_tasks.py — Тесты вступления в группы и выхода из них.
cd backend && poetry run pytest -v -s tests/test_messaging_tasks.py — Тесты массовой рассылки, включая режим "человечной" отправки.

cd backend && poetry run pytest -v -s tests/test_proxy_endpoints.py — Тесты добавления, проверки и удаления прокси.
cd backend && poetry run pytest -v -s tests/test_scenarios.py — Тесты полного жизненного цикла сложных сценариев.
cd backend && poetry run pytest -v -s tests/test_task_management.py — (Новое) Тесты отмены, повтора задач и истории.
cd backend && poetry run pytest -v -s tests/test_team_features.py — (Новое) Тесты создания команд и проверки прав доступа.
cd backend && poetry run pytest -v -s tests/test_permissions_and_edge_cases.py — (Новое) Тесты ограничений по тарифам и обработки ошибок.
cd backend && poetry run pytest -v -s tests/test_robustness_and_billing.py — Тесты на устойчивость к ошибкам, лимитам и логики биллинга.
cd backend && poetry run pytest -v -s tests/test_complex_scenarios.py — Тесты сложных взаимодействий между разными частями системы.
cd backend && poetry run pytest -v -s tests/test_filter_diagnostics.py — Диагностика работы фильтров на ваших реальных данных.


ПОТОМ СДЕЛАТЬ! Фронтенд: Добавить JavaScript-код, который будет слушать событие paste и использовать navigator.clipboard.read() для получения данных изображения.