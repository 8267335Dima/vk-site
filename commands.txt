Запустите сервер для разработки: npm start
Откройте в браузере http://localhost:3000

docker-compose down
docker-compose build --no-cache
docker-compose up -d


запуск сразу:
# Выполнять в терминале в папке frontend
npm run dev
npm start
npm run dev
docker exec -it social_pilot_postgres_prod psql -U smm_user -d smm_combine
\dt

тесты: docker-compose exec backend pytest
После внесения изменений выполните docker-compose up -d --force-recreate, чтобы пересоздать контейнеры с новыми сетевыми настройками


Ваш новый рабочий процесс
Теперь все управление проектом происходит из папки frontend.
Первый раз / Применение миграций:
Откройте терминал в frontend/.
npm run services:up (запустит Postgres и Redis)
npm run db:upgrade (создаст таблицы в базе)
Ежедневная разработка:
Откройте терминал в frontend/.
npm run services:up (если сервисы еще не запущены)
npm run dev (запустит весь ваш код)


Выполните npm run services:down, чтобы остановить Postgres и Redis.

cd frontend && yarn dev
arq --watch . app.worker.WorkerSettings
cd backend && alembic revision --autogenerate -m "add timezone" && alembic upgrade head


тесты: cd backend && pytest -sv tests/test_filters.py